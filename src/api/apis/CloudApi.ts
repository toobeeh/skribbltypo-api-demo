/* tslint:disable */
/* eslint-disable */
/**
 * Skribbl Typo API
 * Skribbl Typo API for resources, admin tools and authentification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CloudDeleteDto,
  CloudImageDto,
  CloudSearchDto,
  CloudUploadDto,
} from '../models/index';
import {
    CloudDeleteDtoFromJSON,
    CloudDeleteDtoToJSON,
    CloudImageDtoFromJSON,
    CloudImageDtoToJSON,
    CloudSearchDtoFromJSON,
    CloudSearchDtoToJSON,
    CloudUploadDtoFromJSON,
    CloudUploadDtoToJSON,
} from '../models/index';

export interface BulkDeleteFromUserCloudRequest {
    login: number;
    cloudDeleteDto: CloudDeleteDto;
}

export interface DeleteImageFromUserCloudRequest {
    login: number;
    id: string;
}

export interface GetImageFromUserCloudRequest {
    login: number;
    id: string;
}

export interface LinkImageToAwardRequest {
    login: number;
    id: string;
    token: number;
}

export interface SearchUserCloudRequest {
    login: number;
    cloudSearchDto: CloudSearchDto;
}

export interface UploadToUserCloudRequest {
    login: number;
    cloudUploadDto: CloudUploadDto;
}

/**
 * 
 */
export class CloudApi extends runtime.BaseAPI {

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 30 Requests / 60000 ms TTL
     * Delete multiple images from the user\'s cloud
     */
    async bulkDeleteFromUserCloudRaw(requestParameters: BulkDeleteFromUserCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling bulkDeleteFromUserCloud().'
            );
        }

        if (requestParameters['cloudDeleteDto'] == null) {
            throw new runtime.RequiredError(
                'cloudDeleteDto',
                'Required parameter "cloudDeleteDto" was null or undefined when calling bulkDeleteFromUserCloud().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cloud/{login}/delete`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudDeleteDtoToJSON(requestParameters['cloudDeleteDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 30 Requests / 60000 ms TTL
     * Delete multiple images from the user\'s cloud
     */
    async bulkDeleteFromUserCloud(requestParameters: BulkDeleteFromUserCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteFromUserCloudRaw(requestParameters, initOverrides);
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 30 Requests / 60000 ms TTL
     * Delete a image by id from the cloud
     */
    async deleteImageFromUserCloudRaw(requestParameters: DeleteImageFromUserCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CloudImageDto>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling deleteImageFromUserCloud().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteImageFromUserCloud().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cloud/{login}/{id}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudImageDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 30 Requests / 60000 ms TTL
     * Delete a image by id from the cloud
     */
    async deleteImageFromUserCloud(requestParameters: DeleteImageFromUserCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CloudImageDto> {
        const response = await this.deleteImageFromUserCloudRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 30 Requests / 60000 ms TTL
     * Get a image by id from the cloud
     */
    async getImageFromUserCloudRaw(requestParameters: GetImageFromUserCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CloudImageDto>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling getImageFromUserCloud().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getImageFromUserCloud().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cloud/{login}/{id}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CloudImageDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 30 Requests / 60000 ms TTL
     * Get a image by id from the cloud
     */
    async getImageFromUserCloud(requestParameters: GetImageFromUserCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CloudImageDto> {
        const response = await this.getImageFromUserCloudRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 10 Requests / 60000 ms TTL
     * Link an image of the user to an award in their received inventory, which has no linked image yet
     */
    async linkImageToAwardRaw(requestParameters: LinkImageToAwardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling linkImageToAward().'
            );
        }

        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling linkImageToAward().'
            );
        }

        if (requestParameters['token'] == null) {
            throw new runtime.RequiredError(
                'token',
                'Required parameter "token" was null or undefined when calling linkImageToAward().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cloud/{login}/{id}/award/{token}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))).replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"token"}}`, encodeURIComponent(String(requestParameters['token']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 10 Requests / 60000 ms TTL
     * Link an image of the user to an award in their received inventory, which has no linked image yet
     */
    async linkImageToAward(requestParameters: LinkImageToAwardRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.linkImageToAwardRaw(requestParameters, initOverrides);
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 30 Requests / 60000 ms TTL
     * Search for cloud images
     */
    async searchUserCloudRaw(requestParameters: SearchUserCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CloudImageDto>>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling searchUserCloud().'
            );
        }

        if (requestParameters['cloudSearchDto'] == null) {
            throw new runtime.RequiredError(
                'cloudSearchDto',
                'Required parameter "cloudSearchDto" was null or undefined when calling searchUserCloud().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cloud/{login}/search`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudSearchDtoToJSON(requestParameters['cloudSearchDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CloudImageDtoFromJSON));
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 30 Requests / 60000 ms TTL
     * Search for cloud images
     */
    async searchUserCloud(requestParameters: SearchUserCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CloudImageDto>> {
        const response = await this.searchUserCloudRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 10 Requests / 60000 ms TTL
     * Upload a new image to the user\'s cloud
     */
    async uploadToUserCloudRaw(requestParameters: UploadToUserCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling uploadToUserCloud().'
            );
        }

        if (requestParameters['cloudUploadDto'] == null) {
            throw new runtime.RequiredError(
                'cloudUploadDto',
                'Required parameter "cloudUploadDto" was null or undefined when calling uploadToUserCloud().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/cloud/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloudUploadDtoToJSON(requestParameters['cloudUploadDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     *   Required Role: Member - Role override if {login} matches the client login.  Rate limit default: 10 Requests / 60000 ms TTL
     * Upload a new image to the user\'s cloud
     */
    async uploadToUserCloud(requestParameters: UploadToUserCloudRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadToUserCloudRaw(requestParameters, initOverrides);
    }

}
