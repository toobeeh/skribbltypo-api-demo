/* tslint:disable */
/* eslint-disable */
/**
 * Skribbl Typo API
 * Skribbl Typo API for resources, admin tools and authentification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  LeagueSeasonEvaluationDto,
  LeagueSeasonMemberEvaluationDto,
} from '../models/index';
import {
    LeagueSeasonEvaluationDtoFromJSON,
    LeagueSeasonEvaluationDtoToJSON,
    LeagueSeasonMemberEvaluationDtoFromJSON,
    LeagueSeasonMemberEvaluationDtoToJSON,
} from '../models/index';

export interface EvaluateLeagueSeasonRequest {
    year: number;
    month: number;
}

export interface EvaluateMemberCurrentLeagueSeasonRequest {
    login: number;
}

export interface EvaluateMemberLeagueSeasonRequest {
    login: number;
    year: number;
    month: number;
}

/**
 * 
 */
export class LeaguesApi extends runtime.BaseAPI {

    /**
     *   Required Role: Member  Rate limit default: 10 Requests / 60000 ms TTL
     * Get the total ranking of the current league season
     */
    async evaluateCurrentLeagueSeasonRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeagueSeasonEvaluationDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/leagues/ranking`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeagueSeasonEvaluationDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: Member  Rate limit default: 10 Requests / 60000 ms TTL
     * Get the total ranking of the current league season
     */
    async evaluateCurrentLeagueSeason(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeagueSeasonEvaluationDto> {
        const response = await this.evaluateCurrentLeagueSeasonRaw(initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: Member  Rate limit default: 10 Requests / 60000 ms TTL
     * Get the total ranking of the a league season
     */
    async evaluateLeagueSeasonRaw(requestParameters: EvaluateLeagueSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeagueSeasonEvaluationDto>> {
        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling evaluateLeagueSeason().'
            );
        }

        if (requestParameters['month'] == null) {
            throw new runtime.RequiredError(
                'month',
                'Required parameter "month" was null or undefined when calling evaluateLeagueSeason().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/leagues/{year}/{month}/ranking`.replace(`{${"year"}}`, encodeURIComponent(String(requestParameters['year']))).replace(`{${"month"}}`, encodeURIComponent(String(requestParameters['month']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeagueSeasonEvaluationDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: Member  Rate limit default: 10 Requests / 60000 ms TTL
     * Get the total ranking of the a league season
     */
    async evaluateLeagueSeason(requestParameters: EvaluateLeagueSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeagueSeasonEvaluationDto> {
        const response = await this.evaluateLeagueSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: Moderator - Role override if {login} matches the client login.  Rate limit default: 10 Requests / 60000 ms TTL
     * Get the ranking of a single member of the current league season
     */
    async evaluateMemberCurrentLeagueSeasonRaw(requestParameters: EvaluateMemberCurrentLeagueSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeagueSeasonMemberEvaluationDto>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling evaluateMemberCurrentLeagueSeason().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/leagues/member/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeagueSeasonMemberEvaluationDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: Moderator - Role override if {login} matches the client login.  Rate limit default: 10 Requests / 60000 ms TTL
     * Get the ranking of a single member of the current league season
     */
    async evaluateMemberCurrentLeagueSeason(requestParameters: EvaluateMemberCurrentLeagueSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeagueSeasonMemberEvaluationDto> {
        const response = await this.evaluateMemberCurrentLeagueSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: Moderator - Role override if {login} matches the client login.  Rate limit default: 10 Requests / 60000 ms TTL
     * Get the ranking of a single member of the specified league season
     */
    async evaluateMemberLeagueSeasonRaw(requestParameters: EvaluateMemberLeagueSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LeagueSeasonMemberEvaluationDto>> {
        if (requestParameters['login'] == null) {
            throw new runtime.RequiredError(
                'login',
                'Required parameter "login" was null or undefined when calling evaluateMemberLeagueSeason().'
            );
        }

        if (requestParameters['year'] == null) {
            throw new runtime.RequiredError(
                'year',
                'Required parameter "year" was null or undefined when calling evaluateMemberLeagueSeason().'
            );
        }

        if (requestParameters['month'] == null) {
            throw new runtime.RequiredError(
                'month',
                'Required parameter "month" was null or undefined when calling evaluateMemberLeagueSeason().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/leagues/{year}/{month}/member/{login}`.replace(`{${"login"}}`, encodeURIComponent(String(requestParameters['login']))).replace(`{${"year"}}`, encodeURIComponent(String(requestParameters['year']))).replace(`{${"month"}}`, encodeURIComponent(String(requestParameters['month']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LeagueSeasonMemberEvaluationDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: Moderator - Role override if {login} matches the client login.  Rate limit default: 10 Requests / 60000 ms TTL
     * Get the ranking of a single member of the specified league season
     */
    async evaluateMemberLeagueSeason(requestParameters: EvaluateMemberLeagueSeasonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LeagueSeasonMemberEvaluationDto> {
        const response = await this.evaluateMemberLeagueSeasonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
