/* tslint:disable */
/* eslint-disable */
/**
 * Skribbl Typo API
 * Skribbl Typo API for resources, admin tools and authentification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ThemeDto,
  ThemeListingDto,
  ThemePublishRequestDto,
  ThemeShareDto,
  ThemeUpdateRequestDto,
} from '../models/index';
import {
    ThemeDtoFromJSON,
    ThemeDtoToJSON,
    ThemeListingDtoFromJSON,
    ThemeListingDtoToJSON,
    ThemePublishRequestDtoFromJSON,
    ThemePublishRequestDtoToJSON,
    ThemeShareDtoFromJSON,
    ThemeShareDtoToJSON,
    ThemeUpdateRequestDtoFromJSON,
    ThemeUpdateRequestDtoToJSON,
} from '../models/index';

export interface GetThemeByIdRequest {
    id: string;
}

export interface PublishThemeRequest {
    id: string;
    themePublishRequestDto: ThemePublishRequestDto;
}

export interface ShareThemeRequest {
    themeDto: ThemeDto;
}

export interface UpdateThemeRequest {
    id: string;
    themeUpdateRequestDto: ThemeUpdateRequestDto;
}

export interface UseThemeByIdRequest {
    id: string;
}

/**
 * 
 */
export class ThemesApi extends runtime.BaseAPI {

    /**
     *   Required Role: None  Rate limit default: 10 Requests / 60000 ms TTL
     * Get all published themes
     */
    async getAllThemesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ThemeListingDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/themes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ThemeListingDtoFromJSON));
    }

    /**
     *   Required Role: None  Rate limit default: 10 Requests / 60000 ms TTL
     * Get all published themes
     */
    async getAllThemes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ThemeListingDto>> {
        const response = await this.getAllThemesRaw(initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: None  Rate limit default: 10 Requests / 60000 ms TTL
     * Get a theme by ID
     */
    async getThemeByIdRaw(requestParameters: GetThemeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getThemeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/themes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: None  Rate limit default: 10 Requests / 60000 ms TTL
     * Get a theme by ID
     */
    async getThemeById(requestParameters: GetThemeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeDto> {
        const response = await this.getThemeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: Moderator  Rate limit default: 10 Requests / 60000 ms TTL
     * Publish a theme to the public theme list
     */
    async publishThemeRaw(requestParameters: PublishThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeShareDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling publishTheme().'
            );
        }

        if (requestParameters['themePublishRequestDto'] == null) {
            throw new runtime.RequiredError(
                'themePublishRequestDto',
                'Required parameter "themePublishRequestDto" was null or undefined when calling publishTheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/themes/{id}/public`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThemePublishRequestDtoToJSON(requestParameters['themePublishRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeShareDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: Moderator  Rate limit default: 10 Requests / 60000 ms TTL
     * Publish a theme to the public theme list
     */
    async publishTheme(requestParameters: PublishThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeShareDto> {
        const response = await this.publishThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: None  Rate limit default: 10 Requests / 60000 ms TTL
     * Share a theme to be used by others
     */
    async shareThemeRaw(requestParameters: ShareThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeShareDto>> {
        if (requestParameters['themeDto'] == null) {
            throw new runtime.RequiredError(
                'themeDto',
                'Required parameter "themeDto" was null or undefined when calling shareTheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/themes/share`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ThemeDtoToJSON(requestParameters['themeDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeShareDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: None  Rate limit default: 10 Requests / 60000 ms TTL
     * Share a theme to be used by others
     */
    async shareTheme(requestParameters: ShareThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeShareDto> {
        const response = await this.shareThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: Moderator  Rate limit default: 10 Requests / 60000 ms TTL
     * Update the theme content from the provided new share and increment version
     */
    async updateThemeRaw(requestParameters: UpdateThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeShareDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateTheme().'
            );
        }

        if (requestParameters['themeUpdateRequestDto'] == null) {
            throw new runtime.RequiredError(
                'themeUpdateRequestDto',
                'Required parameter "themeUpdateRequestDto" was null or undefined when calling updateTheme().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/themes/{id}/public`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ThemeUpdateRequestDtoToJSON(requestParameters['themeUpdateRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeShareDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: Moderator  Rate limit default: 10 Requests / 60000 ms TTL
     * Update the theme content from the provided new share and increment version
     */
    async updateTheme(requestParameters: UpdateThemeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeShareDto> {
        const response = await this.updateThemeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     *   Required Role: None  Rate limit default: 5 Requests / 18000000 ms TTL
     * Get a theme by ID and increment use counter
     */
    async useThemeByIdRaw(requestParameters: UseThemeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ThemeDto>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling useThemeById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/themes/{id}/use`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ThemeDtoFromJSON(jsonValue));
    }

    /**
     *   Required Role: None  Rate limit default: 5 Requests / 18000000 ms TTL
     * Get a theme by ID and increment use counter
     */
    async useThemeById(requestParameters: UseThemeByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ThemeDto> {
        const response = await this.useThemeByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
