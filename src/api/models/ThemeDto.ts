/* tslint:disable */
/* eslint-disable */
/**
 * Skribbl Typo API
 * Skribbl Typo API for resources, admin tools and authentification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ThemeMetaDto } from './ThemeMetaDto';
import {
    ThemeMetaDtoFromJSON,
    ThemeMetaDtoFromJSONTyped,
    ThemeMetaDtoToJSON,
} from './ThemeMetaDto';

/**
 * 
 * @export
 * @interface ThemeDto
 */
export interface ThemeDto {
    /**
     * Skribbl color hooks settings
     * @type {object}
     * @memberof ThemeDto
     */
    colors: object;
    /**
     * Skribbl color hooks additional styles
     * @type {object}
     * @memberof ThemeDto
     */
    hooks: object;
    /**
     * Image settings
     * @type {object}
     * @memberof ThemeDto
     */
    images: object;
    /**
     * Miscellaneous settings
     * @type {object}
     * @memberof ThemeDto
     */
    misc: object;
    /**
     * Theme metadata
     * @type {ThemeMetaDto}
     * @memberof ThemeDto
     */
    meta: ThemeMetaDto;
}

/**
 * Check if a given object implements the ThemeDto interface.
 */
export function instanceOfThemeDto(value: object): value is ThemeDto {
    if (!('colors' in value) || value['colors'] === undefined) return false;
    if (!('hooks' in value) || value['hooks'] === undefined) return false;
    if (!('images' in value) || value['images'] === undefined) return false;
    if (!('misc' in value) || value['misc'] === undefined) return false;
    if (!('meta' in value) || value['meta'] === undefined) return false;
    return true;
}

export function ThemeDtoFromJSON(json: any): ThemeDto {
    return ThemeDtoFromJSONTyped(json, false);
}

export function ThemeDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): ThemeDto {
    if (json == null) {
        return json;
    }
    return {
        
        'colors': json['colors'],
        'hooks': json['hooks'],
        'images': json['images'],
        'misc': json['misc'],
        'meta': ThemeMetaDtoFromJSON(json['meta']),
    };
}

export function ThemeDtoToJSON(value?: ThemeDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'colors': value['colors'],
        'hooks': value['hooks'],
        'images': value['images'],
        'misc': value['misc'],
        'meta': ThemeMetaDtoToJSON(value['meta']),
    };
}

