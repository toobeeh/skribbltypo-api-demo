/* tslint:disable */
/* eslint-disable */
/**
 * Skribbl Typo API
 * Skribbl Typo API for resources, admin tools and authentification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EventDropDto } from './EventDropDto';
import {
    EventDropDtoFromJSON,
    EventDropDtoFromJSONTyped,
    EventDropDtoToJSON,
} from './EventDropDto';

/**
 * 
 * @export
 * @interface SpriteDto
 */
export interface SpriteDto {
    /**
     * Sprite name
     * @type {string}
     * @memberof SpriteDto
     */
    name: string;
    /**
     * Sprite unique ID
     * @type {number}
     * @memberof SpriteDto
     */
    id: number;
    /**
     * Sprite cost in bubbles or eventdrops
     * @type {number}
     * @memberof SpriteDto
     */
    cost: number;
    /**
     * Sprite url
     * @type {string}
     * @memberof SpriteDto
     */
    url: string;
    /**
     * Associated event drop
     * @type {EventDropDto}
     * @memberof SpriteDto
     */
    eventDrop?: EventDropDto;
    /**
     * Flag for rainbow shift
     * @type {boolean}
     * @memberof SpriteDto
     */
    isRainbowAllowed: boolean;
    /**
     * Flag for special sprite
     * @type {boolean}
     * @memberof SpriteDto
     */
    isSpecial: boolean;
    /**
     * Sprite artist name
     * @type {string}
     * @memberof SpriteDto
     */
    artist?: string;
    /**
     * Flags where at least one must be fulfilled to buy the sprite
     * @type {Array<string>}
     * @memberof SpriteDto
     */
    requiredFlags: Array<string>;
}

/**
 * Check if a given object implements the SpriteDto interface.
 */
export function instanceOfSpriteDto(value: object): value is SpriteDto {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('cost' in value) || value['cost'] === undefined) return false;
    if (!('url' in value) || value['url'] === undefined) return false;
    if (!('isRainbowAllowed' in value) || value['isRainbowAllowed'] === undefined) return false;
    if (!('isSpecial' in value) || value['isSpecial'] === undefined) return false;
    if (!('requiredFlags' in value) || value['requiredFlags'] === undefined) return false;
    return true;
}

export function SpriteDtoFromJSON(json: any): SpriteDto {
    return SpriteDtoFromJSONTyped(json, false);
}

export function SpriteDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SpriteDto {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'id': json['id'],
        'cost': json['cost'],
        'url': json['url'],
        'eventDrop': json['eventDrop'] == null ? undefined : EventDropDtoFromJSON(json['eventDrop']),
        'isRainbowAllowed': json['isRainbowAllowed'],
        'isSpecial': json['isSpecial'],
        'artist': json['artist'] == null ? undefined : json['artist'],
        'requiredFlags': json['requiredFlags'],
    };
}

export function SpriteDtoToJSON(value?: SpriteDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'name': value['name'],
        'id': value['id'],
        'cost': value['cost'],
        'url': value['url'],
        'eventDrop': EventDropDtoToJSON(value['eventDrop']),
        'isRainbowAllowed': value['isRainbowAllowed'],
        'isSpecial': value['isSpecial'],
        'artist': value['artist'],
        'requiredFlags': value['requiredFlags'],
    };
}

