/* tslint:disable */
/* eslint-disable */
/**
 * Skribbl Typo API
 * Skribbl Typo API for resources, admin tools and authentification.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LeagueScoreRanking } from './LeagueScoreRanking';
import {
    LeagueScoreRankingFromJSON,
    LeagueScoreRankingFromJSONTyped,
    LeagueScoreRankingToJSON,
} from './LeagueScoreRanking';
import type { LeagueAverageWeightRanking } from './LeagueAverageWeightRanking';
import {
    LeagueAverageWeightRankingFromJSON,
    LeagueAverageWeightRankingFromJSONTyped,
    LeagueAverageWeightRankingToJSON,
} from './LeagueAverageWeightRanking';
import type { LeagueCountRanking } from './LeagueCountRanking';
import {
    LeagueCountRankingFromJSON,
    LeagueCountRankingFromJSONTyped,
    LeagueCountRankingToJSON,
} from './LeagueCountRanking';
import type { LeagueAverageTimeRanking } from './LeagueAverageTimeRanking';
import {
    LeagueAverageTimeRankingFromJSON,
    LeagueAverageTimeRankingFromJSONTyped,
    LeagueAverageTimeRankingToJSON,
} from './LeagueAverageTimeRanking';
import type { LeagueStreakRanking } from './LeagueStreakRanking';
import {
    LeagueStreakRankingFromJSON,
    LeagueStreakRankingFromJSONTyped,
    LeagueStreakRankingToJSON,
} from './LeagueStreakRanking';

/**
 * 
 * @export
 * @interface LeagueSeasonEvaluationDto
 */
export interface LeagueSeasonEvaluationDto {
    /**
     * The year of the league season
     * @type {number}
     * @memberof LeagueSeasonEvaluationDto
     */
    year: number;
    /**
     * The month of the league season
     * @type {number}
     * @memberof LeagueSeasonEvaluationDto
     */
    month: number;
    /**
     * Ranking of all participants in category count
     * @type {Array<LeagueCountRanking>}
     * @memberof LeagueSeasonEvaluationDto
     */
    countRanking: Array<LeagueCountRanking>;
    /**
     * Ranking of all participants in category score
     * @type {Array<LeagueScoreRanking>}
     * @memberof LeagueSeasonEvaluationDto
     */
    scoreRanking: Array<LeagueScoreRanking>;
    /**
     * Ranking of all participants in category streak
     * @type {Array<LeagueStreakRanking>}
     * @memberof LeagueSeasonEvaluationDto
     */
    streakRanking: Array<LeagueStreakRanking>;
    /**
     * Ranking of all participants in category average weight
     * @type {Array<LeagueAverageWeightRanking>}
     * @memberof LeagueSeasonEvaluationDto
     */
    weightRanking: Array<LeagueAverageWeightRanking>;
    /**
     * Ranking of all participants in category average time
     * @type {Array<LeagueAverageTimeRanking>}
     * @memberof LeagueSeasonEvaluationDto
     */
    timeRanking: Array<LeagueAverageTimeRanking>;
}

/**
 * Check if a given object implements the LeagueSeasonEvaluationDto interface.
 */
export function instanceOfLeagueSeasonEvaluationDto(value: object): value is LeagueSeasonEvaluationDto {
    if (!('year' in value) || value['year'] === undefined) return false;
    if (!('month' in value) || value['month'] === undefined) return false;
    if (!('countRanking' in value) || value['countRanking'] === undefined) return false;
    if (!('scoreRanking' in value) || value['scoreRanking'] === undefined) return false;
    if (!('streakRanking' in value) || value['streakRanking'] === undefined) return false;
    if (!('weightRanking' in value) || value['weightRanking'] === undefined) return false;
    if (!('timeRanking' in value) || value['timeRanking'] === undefined) return false;
    return true;
}

export function LeagueSeasonEvaluationDtoFromJSON(json: any): LeagueSeasonEvaluationDto {
    return LeagueSeasonEvaluationDtoFromJSONTyped(json, false);
}

export function LeagueSeasonEvaluationDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): LeagueSeasonEvaluationDto {
    if (json == null) {
        return json;
    }
    return {
        
        'year': json['year'],
        'month': json['month'],
        'countRanking': ((json['countRanking'] as Array<any>).map(LeagueCountRankingFromJSON)),
        'scoreRanking': ((json['scoreRanking'] as Array<any>).map(LeagueScoreRankingFromJSON)),
        'streakRanking': ((json['streakRanking'] as Array<any>).map(LeagueStreakRankingFromJSON)),
        'weightRanking': ((json['weightRanking'] as Array<any>).map(LeagueAverageWeightRankingFromJSON)),
        'timeRanking': ((json['timeRanking'] as Array<any>).map(LeagueAverageTimeRankingFromJSON)),
    };
}

export function LeagueSeasonEvaluationDtoToJSON(value?: LeagueSeasonEvaluationDto | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'year': value['year'],
        'month': value['month'],
        'countRanking': ((value['countRanking'] as Array<any>).map(LeagueCountRankingToJSON)),
        'scoreRanking': ((value['scoreRanking'] as Array<any>).map(LeagueScoreRankingToJSON)),
        'streakRanking': ((value['streakRanking'] as Array<any>).map(LeagueStreakRankingToJSON)),
        'weightRanking': ((value['weightRanking'] as Array<any>).map(LeagueAverageWeightRankingToJSON)),
        'timeRanking': ((value['timeRanking'] as Array<any>).map(LeagueAverageTimeRankingToJSON)),
    };
}

